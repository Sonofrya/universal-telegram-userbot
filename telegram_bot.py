"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
"""
import logging
import os
from typing import List, Optional, Dict, Any
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from telethon.tl.types import User, Chat, Channel
from config import config
from database import DatabaseManager
from ml_classifier import UniversalMessageClassifier

class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self, db_manager: DatabaseManager = None, classifier: UniversalMessageClassifier = None):
        self.db_manager = db_manager or DatabaseManager()
        self.classifier = classifier or UniversalMessageClassifier(db_manager=self.db_manager)
        self.client = None
        self.processed_messages = set()
        self.daily_stats = {
            'processed': 0,
            'forwarded': 0,
            'rejected': 0,
            'training_examples': 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        self._init_client()
    
    def _init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            session_string = None
            if os.path.exists(config.telegram.session_file):
                with open(config.telegram.session_file, 'r') as f:
                    session_string = f.read().strip()
            
            if session_string:
                self.client = TelegramClient(StringSession(session_string), config.telegram.api_id, config.telegram.api_hash)
            else:
                self.client = TelegramClient(StringSession(), config.telegram.api_id, config.telegram.api_hash)
                
            logging.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.client = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        if not self.client:
            logging.error("‚ùå Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            if not os.path.exists(config.telegram.session_file):
                await self.client.start(phone=config.telegram.phone_number)
                with open(config.telegram.session_file, 'w') as f:
                    f.write(self.client.session.save())
                logging.info("‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            else:
                await self.client.start()
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self._preload_user_entities()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏: {self.classifier.get_stats()}")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    async def _preload_user_entities(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logging.info("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            for user_id in config.business.target_user_ids:
                try:
                    entity = await self._get_entity(user_id)
                    if entity:
                        logging.info(f"‚úÖ –°—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    else:
                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è {user_id}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏ {user_id}: {e}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    async def _get_entity(self, user_id: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id.isdigit():
                return await self.client.get_entity(int(user_id))
            else:
                return await self.client.get_entity(user_id)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {user_id}: {e}")
            return None
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        @self.client.on(events.NewMessage(pattern='/train'))
        async def train_handler(event):
            await self._handle_train_command(event)
        
        @self.client.on(events.NewMessage(pattern='/stats'))
        async def stats_handler(event):
            await self._handle_stats_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'/correct_(\d+)'))
        async def correct_handler(event):
            await self._handle_correct_command(event)
        
        @self.client.on(events.NewMessage(pattern=r'/wrong_(\d+)'))
        async def wrong_handler(event):
            await self._handle_wrong_command(event)
        
        @self.client.on(events.NewMessage(pattern='/clear_history'))
        async def clear_history_handler(event):
            await self._handle_clear_history_command(event)
        
        @self.client.on(events.NewMessage(pattern='/help'))
        async def help_handler(event):
            await self._handle_help_command(event)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.client.on(events.NewMessage)
        async def message_handler(event):
            await self._handle_message(event)
    
    async def _handle_train_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /train"""
        try:
            if len(self.classifier.training_data) >= config.ml.min_training_examples:
                success = self.classifier.retrain()
                if success:
                    stats = self.classifier.get_stats()
                    response = (
                        f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞!\n"
                        f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {stats.get('accuracy', 0):.2%}\n"
                        f"üìà F1-–º–µ—Ä–∞: {stats.get('f1_score', 0):.2%}\n"
                        f"üìö –ü—Ä–∏–º–µ—Ä–æ–≤: {stats['training_examples']}"
                    )
                else:
                    response = "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"
            else:
                response = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ {config.ml.min_training_examples}+ –ø—Ä–∏–º–µ—Ä–æ–≤ (—Å–µ–π—á–∞—Å: {len(self.classifier.training_data)})"
            
            await event.reply(response)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /train: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    
    async def _handle_stats_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏
            ml_stats = self.classifier.get_stats()
            training_stats = self.classifier.get_training_data_stats()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
            bot_stats = self.db_manager.get_stats_summary(7)
            
            response = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏:**\n"
                f"‚Ä¢ –û–±—É—á–µ–Ω–∞: {'‚úÖ' if ml_stats['is_trained'] else '‚ùå'}\n"
                f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–≤: {ml_stats['training_examples']}\n"
                f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {ml_stats.get('accuracy', 0):.2%}\n"
                f"‚Ä¢ F1-–º–µ—Ä–∞: {ml_stats.get('f1_score', 0):.2%}\n\n"
                f"üìà **–î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:**\n"
                f"‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {training_stats['positive']}\n"
                f"‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {training_stats['negative']}\n"
                f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {training_stats['balance']:.2%}\n\n"
                f"ü§ñ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (7 –¥–Ω–µ–π):**\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {bot_stats.get('total_processed', 0)}\n"
                f"‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ: {bot_stats.get('total_forwarded', 0)}\n"
                f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {bot_stats.get('total_rejected', 0)}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {bot_stats.get('forward_rate', 0):.1%}"
            )
            
            await event.reply(response)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def _handle_correct_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /correct_<id>"""
        try:
            msg_id = int(event.pattern_match.group(1))
            message_data = self.db_manager.get_message(msg_id)
            
            if message_data:
                success = self.classifier.add_training_example(message_data['text'], 1)
                if success:
                    self.daily_stats['training_examples'] += 1
                    await event.reply("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è!")
                else:
                    await event.reply("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞")
            else:
                await event.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /correct: {e}")
            await event.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /correct_12345")
    
    async def _handle_wrong_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wrong_<id>"""
        try:
            msg_id = int(event.pattern_match.group(1))
            message_data = self.db_manager.get_message(msg_id)
            
            if message_data:
                success = self.classifier.add_training_example(message_data['text'], 0)
                if success:
                    self.daily_stats['training_examples'] += 1
                    await event.reply("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è!")
                else:
                    await event.reply("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞")
            else:
                await event.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /wrong: {e}")
            await event.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /wrong_12345")
    
    async def _handle_clear_history_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_history"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            success = self.db_manager.clear_old_data(30)
            if success:
                await event.reply("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!")
            else:
                await event.reply("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /clear_history: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
    
    async def _handle_help_command(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            f"ü§ñ **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç**\n"
            f"–î–æ–º–µ–Ω: {config.business.business_domain}\n\n"
            f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            f"‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –±–æ—Ç–∞\n"
            f"‚Ä¢ `/train` - –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏\n"
            f"‚Ä¢ `/correct_<id>` - –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ\n"
            f"‚Ä¢ `/wrong_<id>` - –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ\n"
            f"‚Ä¢ `/clear_history` - –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é\n"
            f"‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            f"üîç **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(config.business.keywords[:5])}...\n"
            f"üéØ **–ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞:** {config.ml.similarity_threshold}\n"
            f"üìö **–ü—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:** {len(self.classifier.training_data)}"
        )
        
        await event.reply(help_text)
    
    async def _handle_message(self, event):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await self._process_message(event)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _process_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        if event.message.out or event.message.id in self.processed_messages:
            return
        
        self.processed_messages.add(event.message.id)
        self.daily_stats['processed'] += 1
        
        message_text = event.message.text or ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if not self._passes_filters(message_text):
            self.daily_stats['rejected'] += 1
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        analysis = await self._analyze_message(message_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        message_data = {
            'message_id': event.message.id,
            'text': message_text,
            'sender_info': await self._get_sender_info(event),
            'chat_title': self._get_chat_title(event),
            'message_date': event.message.date.strftime("%d.%m.%Y %H:%M") if event.message.date else "",
            'similarity_score': analysis['similarity'],
            'is_full_cycle': analysis['is_full_cycle'],
            'ml_probability': analysis['ml_probability'],
            'forwarded': analysis['should_forward']
        }
        
        self.db_manager.save_message(message_data)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if analysis['should_forward']:
            await self._forward_message(event, analysis, message_data)
            self.daily_stats['forwarded'] += 1
        else:
            self.daily_stats['rejected'] += 1
            logging.info(f"‚úó –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ [ID: {event.message.id}]")
    
    def _passes_filters(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        if not text:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(text.split()) < config.filter.min_message_length:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text[:50]}...'")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        text_lower = text.lower()
        for word in config.filter.blacklist_words:
            if word.lower() in text_lower:
                logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: '{text[:50]}...'")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
        for pattern in config.filter.forward_patterns:
            import re
            if re.search(pattern, text_lower, re.IGNORECASE):
                logging.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ")
                return False
        
        return True
    
    async def _analyze_message(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å"""
        from utils import clean_text, calculate_similarity, is_about_full_cycle_production
        
        cleaned_text = clean_text(text)
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        similarity = calculate_similarity(
            self.classifier.sentence_model, 
            cleaned_text, 
            config.business.keywords
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        is_full_cycle = is_about_full_cycle_production(text)
        
        # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        ml_probability = self.classifier.predict(text)
        
        # –†–µ—à–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ
        if ml_probability is not None and self.classifier.is_trained:
            should_forward = ml_probability > 0.5
        else:
            should_forward = is_full_cycle or similarity > config.ml.similarity_threshold
        
        return {
            'similarity': similarity,
            'is_full_cycle': is_full_cycle,
            'ml_probability': ml_probability,
            'should_forward': should_forward
        }
    
    async def _get_sender_info(self, event) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"""
        try:
            sender = await event.message.get_sender()
            if not sender:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
            
            info_parts = []
            if hasattr(sender, 'first_name') and sender.first_name:
                info_parts.append(sender.first_name)
            if hasattr(sender, 'last_name') and sender.last_name:
                info_parts.append(sender.last_name)
            if hasattr(sender, 'username') and sender.username:
                info_parts.append(f"(@{sender.username})")
            if hasattr(sender, 'title') and sender.title:
                info_parts.append(sender.title)
            
            return ' '.join(info_parts) if info_parts else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
            
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
    
    def _get_chat_title(self, event) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞"""
        try:
            if hasattr(event.message.chat, 'title') and event.message.chat.title:
                return event.message.chat.title
            return "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"
        except:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
    
    async def _forward_message(self, event, analysis: Dict[str, Any], message_data: Dict[str, Any]):
        """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            chat_title = message_data['chat_title']
            sender_info = message_data['sender_info']
            message_date = message_data['message_date']
            
            ml_info = f", ML: {analysis['ml_probability']:.3f}" if analysis['ml_probability'] is not None else ""
            
            message_info = (
                f"üìÖ {message_date}\n"
                f"üë§ {sender_info}\n"
                f"üí¨ {chat_title}\n"
                f"üîó ID: {event.message.id}\n"
                f"üéØ –°—Ö–æ–¥—Å—Ç–≤–æ: {analysis['similarity']:.3f}{ml_info}\n"
                f"üîÅ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: {'–î–∞' if analysis['is_full_cycle'] else '–ù–µ—Ç'}\n\n"
            )
            
            for user_id in config.business.target_user_ids:
                try:
                    user_entity = await self._get_entity(user_id)
                    if not user_entity:
                        continue
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å
                    try:
                        forward_message = await self.client.forward_messages(user_entity, event.message)
                        if forward_message:
                            await self.client.send_message(user_entity, message_info, reply_to=forward_message.id)
                            logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            continue
                    except Exception as forward_error:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å: {forward_error}")
                    
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å, –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    await self._copy_message_content(event, user_entity, message_info)
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _copy_message_content(self, event, target_user, message_info: str):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            sent_message = None
            
            if event.message.text:
                sent_message = await self.client.send_message(target_user, event.message.text)
            
            if event.message.media and not isinstance(event.message.media, type(None)):
                if sent_message:
                    await self.client.send_file(target_user, event.message.media, reply_to=sent_message.id)
                else:
                    sent_message = await self.client.send_file(target_user, event.message.media)
            
            if sent_message:
                await self.client.send_message(target_user, message_info, reply_to=sent_message.id)
                logging.info(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –¥–µ—Ä–∂–∏—Ç –µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–º"""
        if await self.start():
            await self.client.run_until_disconnected()
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        if self.client:
            await self.client.disconnect()
            logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
