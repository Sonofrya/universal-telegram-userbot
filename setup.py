"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import os
import shutil
from utils import get_business_domain_examples, create_config_template

def setup_bot():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞**\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if os.path.exists('.env'):
        response = input("üìÅ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
        if response.lower() != 'y':
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    print("üåê **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**")
    examples = get_business_domain_examples()
    
    domains = list(examples.keys())
    for i, domain in enumerate(domains, 1):
        print(f"   {i}. {domain}: {examples[domain]['description']}")
    
    print(f"   {len(domains) + 1}. –î—Ä—É–≥–∞—è —Å—Ñ–µ—Ä–∞ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä—É—á–Ω—É—é)")
    
    try:
        choice = int(input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-{len(domains) + 1}): "))
        
        if choice == len(domains) + 1:
            # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            domain = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã: ").strip()
            keywords = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
            phrases = input("–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
            
            config_template = f"""# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ñ–µ—Ä—ã: {domain}
BUSINESS_DOMAIN={domain}
BUSINESS_KEYWORDS={keywords}
FULL_CYCLE_PHRASES={phrases}

# Telegram API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_API_ID=your_api_id_here
TELEGRAM_API_HASH=your_api_hash_here
TELEGRAM_PHONE=your_phone_number

# –¶–µ–ª–µ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
TARGET_USER_IDS=user_id_1,user_id_2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
ML_SIMILARITY_THRESHOLD=0.7
ML_MIN_TRAINING_EXAMPLES=3

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
FILTER_MIN_LENGTH=5
FILTER_BLACKLIST=—Å–ø–∞–º,—Ä–µ–∫–ª–∞–º–∞
"""
        else:
            # –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ñ–µ—Ä–∞
            domain = domains[choice - 1]
            config_template = create_config_template(domain)
            
    except (ValueError, IndexError):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    try:
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(config_template)
        
        print(f"‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ñ–µ—Ä—ã: {domain}")
        print("\nüìù **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env")
        print("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram API")
        print("3. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main_universal.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ .env: {e}")

def create_env_from_example():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"""
    if os.path.exists('env_example.txt'):
        try:
            shutil.copy('env_example.txt', '.env')
            print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
            print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    else:
        print("‚ùå –§–∞–π–ª env_example.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Telegram-–±–æ—Ç - –ù–∞—Å—Ç—Ä–æ–π–∫–∞**\n")
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print("2. –°–æ–∑–¥–∞—Ç—å .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
    print("3. –í—ã—Ö–æ–¥")
    
    try:
        choice = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): "))
        
        if choice == 1:
            setup_bot()
        elif choice == 2:
            create_env_from_example()
        elif choice == 3:
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

if __name__ == "__main__":
    main()
