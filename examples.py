"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä
"""
from utils import get_business_domain_examples, create_config_template

def print_all_examples():
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    examples = get_business_domain_examples()
    
    for domain, info in examples.items():
        print(f"\nüåê **{domain.upper()}**")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
        print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {info['keywords']}")
        print(f"–§—Ä–∞–∑—ã –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {info['full_cycle_phrases']}")
        print("-" * 50)

def create_config_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ñ–µ—Ä"""
    examples = get_business_domain_examples()
    
    for domain in examples.keys():
        filename = f"config_{domain}.env"
        config_content = create_config_template(domain)
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {filename}")

def demo_text_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    from utils import clean_text, calculate_text_complexity, extract_keywords_from_text
    
    sample_texts = [
        "–ù—É–∂–µ–Ω –≤–∏–¥–µ–æ–ø—Ä–æ–¥–∞–∫—à–Ω –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ä–æ–ª–∏–∫–∞. –û—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞.",
        "–ò—â—É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞. –ë—é–¥–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞ –ø–æ–¥ –∫–ª—é—á. –û—Ç –¥–∏–∑–∞–π–Ω–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞.",
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞. –°–≤–∞–¥–µ–±–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.",
        "–ù—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö. –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏."
    ]
    
    print("üîç **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞:**\n")
    
    for i, text in enumerate(sample_texts, 1):
        print(f"**–¢–µ–∫—Å—Ç {i}:** {text}")
        
        # –û—á–∏—Å—Ç–∫–∞
        cleaned = clean_text(text)
        print(f"–û—á–∏—â–µ–Ω–Ω—ã–π: {cleaned}")
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å
        complexity = calculate_text_complexity(text)
        print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity['complexity']:.2f}")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = extract_keywords_from_text(text)
        print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords[:5])}")
        
        print("-" * 50)

def demo_ml_classifier():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
    print("ü§ñ **–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞:**\n")
    
    try:
        from ml_classifier import UniversalMessageClassifier
        from database import DatabaseManager
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        db = DatabaseManager(':memory:')  # –í –ø–∞–º—è—Ç–∏ –¥–ª—è –¥–µ–º–æ
        classifier = UniversalMessageClassifier(db_manager=db)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        training_examples = [
            ("–ù—É–∂–µ–Ω –≤–∏–¥–µ–æ–ø—Ä–æ–¥–∞–∫—à–Ω –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞", 1),
            ("–ò—â—É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞", 0),
            ("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –∫–ª—é—á", 1),
            ("–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞", 0),
            ("–ù—É–∂–µ–Ω –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è", 1),
            ("–ò—â—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞", 0)
        ]
        
        print("üìö –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—É—á–µ–Ω–∏—è:")
        for text, label in training_examples:
            success = classifier.add_training_example(text, label)
            print(f"   {'‚úÖ' if success else '‚ùå'} {text} -> {label}")
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        print("\nüîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        success = classifier.auto_train()
        print(f"–û–±—É—á–µ–Ω–∏–µ: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        test_texts = [
            "–ù—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–∏–¥–µ–æ–ø—Ä–æ–¥–∞–∫—à–Ω–∞",
            "–ò—â—É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞",
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "–ü—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–ª—É–≥–∏"
        ]
        
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        for text in test_texts:
            probability = classifier.predict(text)
            prediction = "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ" if probability and probability > 0.5 else "–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ"
            print(f"   {text} -> {prediction} ({probability:.3f})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = classifier.get_stats()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –û–±—É—á–µ–Ω–∞: {'‚úÖ' if stats['is_trained'] else '‚ùå'}")
        print(f"   –ü—Ä–∏–º–µ—Ä–æ–≤: {stats['training_examples']}")
        if stats.get('accuracy'):
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy']:.2%}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üìö **–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ë–û–¢–ê**\n")
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:")
    print("1. –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("2. –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞")
    print("4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞")
    print("5. –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã")
    
    try:
        choice = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): "))
        
        if choice == 1:
            print_all_examples()
        elif choice == 2:
            create_config_files()
        elif choice == 3:
            demo_text_analysis()
        elif choice == 4:
            demo_ml_classifier()
        elif choice == 5:
            print_all_examples()
            print("\n" + "="*60 + "\n")
            demo_text_analysis()
            print("\n" + "="*60 + "\n")
            demo_ml_classifier()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()
